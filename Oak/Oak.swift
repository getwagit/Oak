//
// Copyright (c) 2016-2017 wag it GmbH.
// License: MIT
//

import Foundation

/**
 Plant Trees to log messages.
 The default Tree, a DebugTree, will use NSLog to print logs to the console.
 */
public class Oak {
    /**
     Plant a new tree.
     This tree will be used to process your logging requests calls.
     
     - Parameter The tree.
     */
    public static func plant(_ tree: OakTree) {
        forest.append(tree)
    }
    
    /**
     Lumber all trees.
     */
    public static func lumber() {
        forest.removeAll()
    }
    
    /**
     Create a verbose log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func v(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.v(message, file, function, line);
        }
    }
    
    /**
     Create a debug log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func d(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.d(message, file, function, line);
        }
    }
    
    /**
     Create an info log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func i(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.i(message, file, function, line);
        }
    }
    
    /**
     Create a warn log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func w(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.w(message, file, function, line);
        }
    }
    
    /**
     Create a error log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func e(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.e(message, file, function, line);
        }
    }
    
    /**
     Create an assert log.
     
     - Parameter message: The message.
     - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
     */
    public class func wtf(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        for tree in forest {
            tree.wtf(message, file, function, line);
        }
    }
    
    /**
     The default tree for logging on the main thread.
     */
    public struct DebugTree: OakTree {
        let dateFormatter: DateFormatter = {
            let dateFormatter = DateFormatter()
            dateFormatter.dateFormat = "H:m:ss.SSSS"
            return dateFormatter
        }()
        
        public func log(_ priority: Int, _ file: String, _ function: String, _ line: Int, _ message: String) {
            print("\(dateFormatter.string(from: Date())) " +
                "\(Priority.asString(priority))/" +
                "\(fileName(file))[\(String(line))] " +
                "\(function): \(message)")
        }
        
        public init(){}
    }
    
    /**
     Logging priority.
     */
    public struct Priority {
        public static let VERBOSE = 2;
        public static  let DEBUG = 3;
        public static  let INFO = 4;
        public static  let WARN = 5;
        public static  let ERROR = 6;
        public static  let ASSERT = 7;

        public static func asString(_ priority: Int) -> String {
            switch priority {
            case VERBOSE: return "V"
            case DEBUG: return "D"
            case INFO: return "I"
            case WARN: return "W"
            case ERROR: return "ERROR"
            case ASSERT: return "WTF"
            default: return "X";
            }
        }
    }
    
    static private var forest = [OakTree]();
    
    static fileprivate var logQueue: DispatchQueue = {
        return DispatchQueue(label: "io.wagit.oak.logger", attributes: [])
    }()
}

/**
    Convenience methods for logging errors.
*/
public extension Oak {
    /**
        Log an error with priority verbose.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func v(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.v(error.localizedDescription, file: file, function: function, line: line)
    }

    /**
        Log an error with priority debug.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func d(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.d(error.localizedDescription, file: file, function: function, line: line)
    }

    /**
        Log an error with priority info.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func i(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.i(error.localizedDescription, file: file, function: function, line: line)
    }

    /**
        Log an error with priority warning.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func w(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.w(error.localizedDescription, file: file, function: function, line: line)
    }

    /**
        Log an error with priority error.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func e(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.e(error.localizedDescription, file: file, function: function, line: line)
    }

    /**
        Log an error with priority assert.

        - Parameter error: The error.
        - (optional) Parameter trace: An optional stack trace generated by NSThread.callStackSymbols()
    */
    public class func wtf(_ error: Error, file: String = #file, function: String = #function, line: Int = #line) {
        Oak.wtf(error.localizedDescription, file: file, function: function, line: line)
    }
}

/**
 Implement this protocol for custom logging trees.
 */
public protocol OakTree {
    func log(_ priority: Int, _ file: String, _ function: String, _ line: Int, _ message: String)
}

/**
 Default implementations for logging methods.
 */
public extension OakTree {
    /**
     Extract the file name from the file path.
     
     - Parameter file: The raw file path supplied by the special literal #file
     
     - Returns: The file name as String.
     */
    public func fileName(_ file: String) -> String {
        let parts = file.components(separatedBy: "/");
        return parts[parts.count - 1].components(separatedBy: ".")[0]
    }
    
    /**
     Execute a logging request asynchronously.
     Good for production logging, when the performance of the may not be affected by logging.
     Just wrap all of your log() content into a closure and pass it as a parameter to this method.
     
     - Parameter closure: Logging code wrapped in a closure.
     */
    public func async(_ closure: @escaping () -> ()) {
        Oak.logQueue.async(execute: closure)
    }
    
    func component(_ symbol: String, _ pos: Int) -> String {
        return symbol.replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression, range: nil)
            .components(separatedBy: " ")[pos]
    }
    
    func v(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.VERBOSE, file, function, line, message)
    }
    
    func d(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.DEBUG, file, function, line, message)
    }
    
    func i(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.INFO, file, function, line, message)
    }
    
    func w(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.WARN, file, function, line, message)
    }
    
    func e(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.ERROR, file, function, line, message)
    }
    
    func wtf(_ message:String, _ file: String, _ function: String, _ line: Int) {
        log(Oak.Priority.ASSERT, file, function, line, message)
    }
}
